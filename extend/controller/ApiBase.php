<?phpnamespace controller;use service\WechatService;use think\Controller;use think\Db;use think\Session;/** * api控制器基类 */class ApiBase extends Controller{    /**     * 当前粉丝用户OPENID     * @var string     */    protected $openid;    /**     * 当前粉丝信息     * @var array     */    protected $fansinfo;    /**     * 当前访问网址     * @var string     */    protected $url;    /**     * 是否默认开启网页授权     * @var bool     */    protected $checkAuth = false;    /**     * 初始化方法     */    public function _initialize()    {        if ($this->checkAuth && empty($this->getOpenId())) {            if($this->getClientCompanyId()&&$this->getClientUserId()){                $this->url = $this->request->url(true);                // 网页授权，并获粉丝信息                $this->assign('jsSign', load_wechat('script')->getJsSign($this->url));                // 检查启用网页授权                $this->checkAuth && $this->oAuth();            }else{                if(!$this->getClientCompanyId()||!$this->getClientUserId()){                    if(isset($_GET['company_id']) && !empty($_GET['company_id'])){                        Session::set('company_id', $_GET['company_id']);                        // 当前完整URL地址                        $this->url = $this->request->url(true);                        // 网页授权，并获粉丝信息                        $this->assign('jsSign', load_wechat('script')->getJsSign($this->url));                        // 检查启用网页授权                        $this->checkAuth && $this->oAuth();                    }                    $param['isredirect'] = '1';                    $this->redirect('@index/login', $param);                }            }        }        //判断当前模块为index        if ($this->checkAuth && $this->request->module() == 'index') {            if (!$this->getClientUserInfo() && !$this->checkIsLoginPage()) {                $this->clearLoginSession();                $param['isredirect'] = '2';                $this->redirect('@index/login', $param);            }        }    }    /**     * 判断当前页面是否登录页面(访问授权循调用)     */    public function checkIsLoginPage()    {        $controllername = strtolower($this->request->controller());        $actionname = strtolower($this->request->action());        return ($controllername == 'login' && $this->request->has('isredirect')) ||            ($controllername == 'login' && $actionname == 'login');    }    /**     * 微信网页授权     * @param bool $fullMode 获取完整     * @return string     */    protected function oAuth($fullMode = true)    {        // 本地开发调试用户 openid        if (in_array($this->request->host(), ['smart-campus:8080'])) {            $this->setLoginSuccess($this->getClientUserId(),'oBWB3wWVNujb-PJlmPmxC5CBTNF0',$this->getClientCompanyId());            $openid['Emp_MircoMsg_Id'] = $this->getOpenId();            Db::name('Employee_list')->where('Emp_Id', $this->getClientUserId())->update($openid);            $this->redirect('index/index');        }        // 检查缓存中 openid 信息是否完整        if (($this->openid = session('open_id'))) {            if (!$fullMode) {                return $this->openid;            }            $this->fansinfo = WechatService::getFansInfo($this->openid);            if (!empty($this->fansinfo) && $this->fansinfo['expires_in'] > time()) {                $this->assign('fansinfo', $this->fansinfo);                return $this->openid;            }        }        // 发起微信网页授权        $wxoauth_url = $this->url;        if (!($redirect_url = $this->request->get('redirectcode', false, 'decode'))) {            $split = stripos($this->url, '?') === false ? '?' : '&';            $wxoauth_url = "{$this->url}{$split}redirectcode=" . encode($this->url);        }        // 微信网页授权处理        $wechat = &load_wechat('Oauth');        if (!$this->request->get('code', false)) {            $this->redirect($wechat->getOauthRedirect($wxoauth_url, 'webOauth', 'snsapi_base'));        }        if (FALSE === ($result = $wechat->getOauthAccessToken()) || empty($result['openid'])) {            Log::error("微信网页授权失败, {$wechat->errMsg}[{$wechat->errCode}]");            $this->error("微信网页授权失败, {$wechat->errMsg}[{$wechat->errCode}]");        }        $this->openid = $result['openid'];        empty($fullMode) && $this->redirect($redirect_url);        // 微信粉丝信息处理        $this->fansinfo = WechatService::getFansInfo($this->openid);        if (empty($this->fansinfo['expires_in']) || intval($this->fansinfo['expires_in']) < time()) {            /* 使用普通授权, 获取用户资料; 未关注时重新使用高级授权 */            if ($result['scope'] === 'snsapi_base') :                $user = load_wechat('User')->getUserInfo($this->openid);                empty($user['subscribe']) && $this->redirect($wechat->getOauthRedirect($wxoauth_url, 'webOauth', 'snsapi_userinfo'));            /* 使用高级授权, 获取完整用户资料 */            elseif ($result['scope'] === 'snsapi_userinfo') :                $user = $wechat->getOauthUserinfo($result['access_token'], $this->openid);            endif;            /* 授权结果处理, 更新粉丝信息 */            if ((empty($user) || !array_key_exists('nickname', $user))) :                Log::error("微信网页授权获取用户信息失败, {$wechat->errMsg}[{$wechat->errCode}]");                $this->error("微信网页授权获取用户信息失败, {$wechat->errMsg}[{$wechat->errCode}]");            endif;            $user['expires_in'] = $result['expires_in'] + time() - 100;            $user['refresh_token'] = $result['refresh_token'];            $user['access_token'] = $result['access_token'];            WechatService::setFansInfo($user, $wechat->appid) or $this->error('微信网页授权用户保存失败!');        }        $employee = Db::name('Employee_list')->where('Emp_MircoMsg_Id', $this->openid)->find();  //用户登录表        $user = $this->fansinfo;        Session::set('headimgurl', $user['headimgurl']);        if ($employee) {            //直接登录成功            $this->setLoginSuccess($employee['Emp_Id'], $this->openid, $employee['company_id']);            $wechat = & load_wechat('User');            $company_info = Db::name('company_list')->where(['company_id'=>$this->getClientCompanyId()])->find();            $tags = Db::name('wechat_fans_tags')->where(['name'=>$company_info['Company_Name'],'appid'=>sysconf('wechat_appid')])->find();            $wechat->batchAddUserTag($tags['id'], $this->getOpenId());            $openid['Emp_image'] = session('headimgurl');            $openid['Emp_MircoMsg_Id'] = $this->getOpenId();            Db::name('Employee_list')->where('Emp_Id', $this->getClientUserId())->update($openid);        } else {            $this->setOpenId($this->openid);            if($this->getClientCompanyId()&&$this->getClientUserId()){                $wechat = & load_wechat('User');                $company_info = Db::name('company_list')->where(['company_id'=>$this->getClientCompanyId()])->find();                $tags = Db::name('wechat_fans_tags')->where(['name'=>$company_info['Company_Name'],'appid'=>sysconf('wechat_appid')])->find();                $wechat->batchAddUserTag($tags['id'], $this->getOpenId());                $this->setLoginSuccess($this->getClientUserId(), $this->getOpenId(),$this->getClientCompanyId());                $openid['Emp_image'] = session('headimgurl');                $openid['Emp_MircoMsg_Id'] = $this->getOpenId();                Db::name('Employee_list')->where('Emp_Id', $this->getClientUserId())->update($openid);            }        }        $this->redirect($redirect_url);    }    protected function getClientUserInfo()    {        $client_user_info = null;        if (Session::get('client_user_id')) {            $user_info = Db::table("Employee_List")                ->where('Emp_Id=:Emp_Id and Emp_MircoMsg_Id=:open_id and Emp_Status!=0',                    ['Emp_Id' => $this->getClientUserId(),                        'open_id' => $this->getOpenId()])                ->find();            $client_user_info = $user_info;        }        return $client_user_info;    }    protected function getClientUserId()    {        $client_user_id = Session::get('client_user_id');        return $client_user_id;    }    protected function getClientCompanyId()    {        $client_company_id = Session::get('company_id');        return $client_company_id;    }    /**     * 获取openid     * @return mixed     */    protected function getOpenId()    {        return Session::get('open_id');    }    /**     * 获取openid     * @return mixed     */    protected function setOpenId($open_id)    {        Session::set('open_id', $open_id);    }    /**     * 设置登录成功     * @param $user_id     * @param $open_id     */    protected function setLoginSuccess($user_id, $open_id, $company_id)    {        Session::set('client_user_id', $user_id);        Session::set('open_id', $open_id);        Session::set('company_id', $company_id);    }    protected function clearLoginSession()    {        Session::delete('client_user_id');        Session::delete('open_id');        Session::delete('company_id');    }    /**     * 获取提交参数,统一存放在data参数,以json的形式     * @return mixed     */    protected function getPostData()    {        $dataJson = $this->request->post('data');        $arr = json_decode($dataJson, true);        if (!$arr)            $this->toJsonError("The parameter data is not the standard json format.", Base::STATUS_CODE_PARAMETER_ERROR);        return $arr;    }}